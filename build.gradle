import org.gradle.internal.xml.XmlTransformer
import org.jetbrains.gradle.ext.Application
import org.jetbrains.gradle.ext.Gradle

buildscript {
    repositories {
        mavenCentral()

        maven {
            name 'forge'
            url 'https://maven.minecraftforge.net'
        }
        maven {
            // GTNH RetroFuturaGradle and ASM Fork
            name "GTNH Maven"
            url "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
            allowInsecureProtocol = true
        }
        maven {
            name 'sonatype'
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            name 'Scala CI dependencies'
            url 'https://repo1.maven.org/maven2/'
        }

        mavenLocal()
    }
}

plugins {
    id 'java-library'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.+'
    id 'net.darkhax.curseforgegradle' version '1.0.11'
    id "org.jetbrains.gradle.plugin.idea-ext" version "1.1.7"
}

def fileVersion = "1.7.0"

version = "1.7.10-$fileVersion"

sourceCompatibility = targetCompatibility = '1.8'

group = "net.jomcraft.serverpassword"

archivesBaseName = "ServerPassword"

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        vendor.set(JvmVendorSpec.AZUL)
    }
    withSourcesJar()
}

def getFile(String relativePath) {
    return new File(projectDir, relativePath)
}

final String modGroupPath = group.replace('.' as char, '/' as char)

boolean atsFound = false
for (File at : sourceSets.getByName("main").resources.files) {
    if (at.name.toLowerCase().endsWith("_at.cfg")) {
        atsFound = true
        tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
        tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
    }
}
for (File at : sourceSets.getByName("api").resources.files) {
    if (at.name.toLowerCase().endsWith("_at.cfg")) {
        atsFound = true
        tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
        tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
    }
}
if (atsFound) {
    logger.warn("Found and added access transformers in the resources folder, please configure gradle.properties to explicitly mention them by name")
}

def replaceGradleTokenInFile = "ServerPassword.java"

minecraft {
    if (replaceGradleTokenInFile) {
        for (f in replaceGradleTokenInFile.split(',')) {
            tagReplacementFiles.add f
        }
    }

    injectedTags.put "SP-VERSION", fileVersion

    //Random username generation
    username = ""

    extraRunJvmArguments.add("-ea:${group}")

    groupsToExcludeFromAutoReobfMapping.addAll(["com.diffplug", "com.diffplug.durian", "net.industrial-craft"])
}

repositories {
    maven {
        name 'Overmind forge repo mirror'
        url 'https://gregtech.overminddl1.com/'
    }
    maven {
        name = "GTNH Maven"
        url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
        allowInsecureProtocol = true
    }
    maven {
        name 'sonatype'
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
        content {
            includeGroup "org.lwjgl"
        }
    }

    exclusiveContent {
        forRepository {
            maven {
                name "CurseMaven"
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "ic2"
        url = "https://maven.ic2.player.to/"
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    maven {
        name = "ic2-mirror"
        url = "https://maven2.ic2.player.to/"
        metadataSources {
            mavenPom()
            artifact()
        }
    }
    maven {
        name "MMD Maven"
        url "https://maven.mcmoddev.com/"
    }

}

dependencies {
    //implementation fileTree(dir: 'libs', include: ['*.jar'])
}

jar {
    manifest {
        attributes("FMLCorePluginContainsFMLMod": "true")
        attributes("FMLCorePlugin": "net.jomcraft.serverpassword.ServerPasswordPlugin")
    }
}

processResources
        {
            duplicatesStrategy = 'include'

            inputs.property "version", fileVersion
            inputs.property "mcversion", project.minecraft.version

            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                expand 'version': fileVersion, 'mcversion': project.minecraft.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                /*"0. Build and Test"(Gradle) {
                    taskNames = ["build"]
                }*/
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                def coreModArgs = ""
                def coreModClass = "ServerPasswordPlugin"
                coreModArgs = ' "-Dfml.coreMods.load=' + group + '.' + coreModClass + '"'
                "Run Client (IJ Native)"(Application) {
                    mainClass = "GradleStart"
                    moduleName = project.name + ".ideVirtualMain"
                    afterEvaluate {
                        workingDirectory = tasks.runClient.workingDir.absolutePath
                        programParameters = tasks.runClient.calculateArgs(project).collect { '"' + it + '"' }.join(' ')
                        jvmArgs = tasks.runClient.calculateJvmArgs(project).collect { '"' + it + '"' }.join(' ') +
                                ' ' + tasks.runClient.systemProperties.collect { '"-D' + it.key + '=' + it.value.toString() + '"' }.join(' ') +
                                coreModArgs
                    }
                }
                "Run Server (IJ Native)"(Application) {
                    mainClass = "GradleStartServer"
                    moduleName = project.name + ".ideVirtualMain"
                    afterEvaluate {
                        workingDirectory = tasks.runServer.workingDir.absolutePath
                        programParameters = tasks.runServer.calculateArgs(project).collect { '"' + it + '"' }.join(' ')
                        jvmArgs = tasks.runServer.calculateJvmArgs(project).collect { '"' + it + '"' }.join(' ') +
                                ' ' + tasks.runServer.systemProperties.collect { '"-D' + it.key + '=' + it.value.toString() + '"' }.join(' ') +
                                coreModArgs
                    }
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
            withIDEADir { File ideaDir ->
                if (!ideaDir.path.contains(".idea")) {
                    // If an .ipr file exists, the project root directory is passed here instead of the .idea subdirectory
                    ideaDir = new File(ideaDir, ".idea")
                }
                if (ideaDir.isDirectory()) {
                    def miscFile = new File(ideaDir, "misc.xml")
                    if (miscFile.isFile()) {
                        boolean dirty = false
                        def miscTransformer = new XmlTransformer()
                        miscTransformer.addAction { root ->
                            Node rootNode = root.asNode()
                            def rootManager = rootNode
                                    .component.find { it.@name == 'ProjectRootManager' }
                            if (!rootManager) {
                                rootManager = rootNode.appendNode('component', ['name': 'ProjectRootManager', 'version': '2'])
                                dirty = true
                            }
                            def output = rootManager.output
                            if (!output) {
                                output = rootManager.appendNode('output')
                                dirty = true
                            }
                            if (!output.@url) {
                                // Only modify the output url if it doesn't yet have one, or if the existing one is blank somehow.
                                // This is a sensible default for most setups
                                output.@url = 'file://$PROJECT_DIR$/build/ideaBuild'
                                dirty = true
                            }
                        }
                        def result = miscTransformer.transform(miscFile.text)
                        if (dirty) {
                            miscFile.write(result)
                        }
                    } else {
                        miscFile.text = """<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectRootManager" version="2">
    <output url="file://\$PROJECT_DIR\$/out" />
  </component>
</project>
"""
                    }
                }
            }
        }
    }
}